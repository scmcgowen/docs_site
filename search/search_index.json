{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Intro","text":"<p>This is the documentation page for Herr Katze's projects</p>"},{"location":"RCChat/data_types/","title":"Data Types","text":""},{"location":"RCChat/data_types/#objects","title":"Objects","text":""},{"location":"RCChat/data_types/#ingameuser","title":"<code>IngameUser</code>","text":"Field Type Description <code>name</code> <code>str</code> Username (typically lowercase) <code>uuid</code> <code>str</code> Unique player identifier <code>displayName</code> <code>str</code> Player\u2019s display name <code>group</code> <code>str</code> User's permission group <code>pronouns</code> <code>Optional[str]</code> Optional user pronouns <code>world</code> <code>Optional[str]</code> Current world name <code>afk</code> <code>bool</code> Whether the player is AFK <code>alt</code> <code>bool</code> Whether the account is an alt <code>bot</code> <code>bool</code> Whether the account is a bot <code>supporter</code> <code>int</code> Supporter level <code>linkedUser</code> <code>Optional[DiscordUser]</code> Associated Discord user if linked"},{"location":"RCChat/data_types/#discordrole","title":"<code>DiscordRole</code>","text":"Field Type Description <code>id</code> <code>str</code> Role ID <code>name</code> <code>str</code> Role name <code>colour</code> <code>int</code> Color code of the role"},{"location":"RCChat/data_types/#discorduser","title":"<code>DiscordUser</code>","text":"Field Type Description <code>id</code> <code>str</code> Discord user ID <code>name</code> <code>str</code> Username <code>displayName</code> <code>str</code> Server display name <code>discriminator</code> <code>Optional[str]</code> Legacy Discord tag <code>avatar</code> <code>str</code> Avatar hash <code>roles</code> <code>list[DiscordRole]</code> List of user roles <code>linkedUser</code> <code>Optional[IngameUser]</code> Associated in-game user if linked"},{"location":"RCChat/data_types/#events","title":"Events","text":""},{"location":"RCChat/data_types/#chat_ingame","title":"<code>chat_ingame</code>","text":"Field Type Description <code>text</code> <code>str</code> Message content <code>rawText</code> <code>str</code> Raw unprocessed text <code>renderedText</code> <code>dict</code> Minecraft JSON Text Format <code>user</code> <code>IngameUser</code> Player who sent the message <code>time</code> <code>str</code> The time (as ISO-8601) this message was sent"},{"location":"RCChat/data_types/#chat_discord","title":"<code>chat_discord</code>","text":"Field Type Description <code>text</code> <code>str</code> Message content <code>rawText</code> <code>str</code> Raw unprocessed text <code>renderedText</code> <code>dict</code> Minecraft JSON Text Format <code>discordId</code> <code>str</code> Discord user ID <code>discordUser</code> <code>DiscordUser</code> Full Discord user info <code>edited</code> <code>bool</code> Whether the message was edited <code>time</code> <code>str</code> The time (as ISO-8601) this message was sent"},{"location":"RCChat/data_types/#command","title":"<code>command</code>","text":"Field Type Description <code>user</code> <code>IngameUser</code> Player who ran the command <code>command</code> <code>str</code> The command name <code>args</code> <code>list[str]</code> Arguments passed with the command <code>ownerOnly</code> <code>bool</code> Whether this is owner-only <code>time</code> <code>str</code> The time (as ISO-8601) this command was issued"},{"location":"RCChat/data_types/#join","title":"<code>join</code>","text":"Field Type Description <code>user</code> <code>IngameUser</code> The player who joined <code>time</code> <code>str</code> The time (as ISO-8601) this player joined the server"},{"location":"RCChat/data_types/#leave","title":"<code>leave</code>","text":"Field Type Description <code>user</code> <code>IngameUser</code> The player who left <code>time</code> <code>str</code> The time (as ISO-8601) this player left the server"},{"location":"RCChat/data_types/#death","title":"<code>death</code>","text":"Field Type Description <code>text</code> <code>str</code> Death message <code>rawText</code> <code>str</code> Unformatted message <code>renderedText</code> <code>dict</code> Minecraft JSON Text Format <code>user</code> <code>IngameUser</code> Player who died <code>source</code> <code>Optional[IngameUser]</code> Player who caused the death (if any) <code>time</code> <code>str</code> The time (as ISO-8601) this player died according to the server"},{"location":"RCChat/data_types/#world_change","title":"<code>world_change</code>","text":"Field Type Description <code>user</code> <code>IngameUser</code> Player who changed worlds <code>origin</code> <code>str</code> Name of the original world <code>destination</code> <code>str</code> Name of the destination world"},{"location":"RCChat/event_handlers/","title":"Event handlers","text":""},{"location":"RCChat/event_handlers/#event-decorators","title":"Event Decorators","text":"<p>These decorators are methods of the instance of the <code>chatbox</code> class. Example:  <pre><code>@cb.on_chat_ingame\n</code></pre></p>"},{"location":"RCChat/event_handlers/#on_chat_ingame","title":"<code>on_chat_ingame</code>","text":"<p>The function must take a <code>chat_ingame</code> event as its only parameter. Example: <pre><code>@cb.on_chat_ingame\nasync def handle_ingame(event: chat_ingame):\n    print(f\"[Ingame] {event.user.displayName}: {event.text}\")\n</code></pre></p>"},{"location":"RCChat/event_handlers/#on_chat_discord","title":"<code>on_chat_discord</code>","text":"<p>The function must take a <code>chat_discord</code> event as its only parameter. Example: <pre><code>@cb.on_chat_discord\nasync def handle_discord(event: chat_discord):\n    print(f\"[Discord] {event.discordUser.displayName}: {event.text}\")\n</code></pre></p>"},{"location":"RCChat/event_handlers/#on_commandfilter","title":"<code>on_command(filter)</code>","text":"<p>The function must take a <code>command</code> event as its only parameter.</p> <p>You can optionally filter the command using <code>@cb.on_command(\"command_name\")</code>.</p> <p>Examples:</p> <p>Without a filter (triggers on all commands): <pre><code>@cb.on_command()\nasync def handle_any_command(event: command):\n    print(f\"{event.user.name} ran: {event.command} {event.args}\")\n</code></pre></p> <p>With a filter: <pre><code>@cb.on_command(\"ping\")\nasync def ping_handler(event: command):\n    await cb.tell(event.user, \"Pong!\")\n</code></pre></p>"},{"location":"RCChat/event_handlers/#on_join","title":"<code>on_join</code>","text":"<p>The function must take a <code>join</code> event as its only parameter. Example: <pre><code>@cb.on_join\nasync def welcome(event: join):\n    print(f\"{event.user.displayName} joined the server!\")\n</code></pre></p>"},{"location":"RCChat/event_handlers/#on_leave","title":"<code>on_leave</code>","text":"<p>The function must take a <code>leave</code> event as its only parameter. Example: <pre><code>@cb.on_leave\nasync def farewell(event: leave):\n    print(f\"{event.user.displayName} left the server.\")\n</code></pre></p>"},{"location":"RCChat/event_handlers/#on_death","title":"<code>on_death</code>","text":"<p>The function must take a <code>death</code> event as its only parameter. Example: <pre><code>@cb.on_death\nasync def deathlog(event: death):\n    print(f\"Death: {event.text}\")\n</code></pre></p>"},{"location":"RCChat/event_handlers/#on_world_change","title":"<code>on_world_change</code>","text":"<p>The function must take a <code>world_change</code> event as its only parameter. Example: <pre><code>@cb.on_world_change\nasync def world_switch(event: world_change):\n    print(f\"{event.user.displayName} moved from {event.origin} to {event.destination}\")\n</code></pre></p>"},{"location":"RCChat/event_handlers/#on_event","title":"<code>on_event</code>","text":"<p>The function must take a generic <code>Event</code> object \u2014 this will be an instance of one of the known event types (<code>chat_ingame</code>, <code>join</code>, etc.). Use <code>isinstance()</code> to check the type if needed. Example: <pre><code>@cb.on_event\nasync def debug_all(event: Event):\n    print(f\"Received event: {type(event).__name__}\")\n</code></pre></p>"},{"location":"RCChat/functions/","title":"Functions","text":""},{"location":"RCChat/functions/#cbsaymessagestrnamestrnonemodestrmarkdown","title":"<code>cb.say(message:str,name:str=None,mode:str=\"markdown\")</code>","text":"<p>Sends a message to public chat.</p> <p>Note</p> <p>This function requires the <code>say</code> capability which must be manually granted by server staff. Most licenses do not have this capability.</p> <p>Example: <pre><code>await cb.say(\"We're no strangers to love\")\n</code></pre></p>"},{"location":"RCChat/functions/#cbtellselfuserstringameusermessagestrnamestrnonemodestrmarkdown","title":"<code>cb.tell(self,user:str|IngameUser,message:str,name:str=None,mode:str=\"markdown\")</code>","text":"<p>Sends a private message to a user.</p> <p>Example: <pre><code>await cb.tell(\"HerrKatzeGaming\", \"You know the rules, and so do I\")\n</code></pre></p>"},{"location":"RCChat/functions/#formatting-modes","title":"Formatting Modes","text":"<p>Any of these formatting modes can be chosen, These functions will default to <code>markdown</code> if unset</p> Format\u00a0Type\u00a0\u00a0 Description <code>markdown</code> Discord-like markdown formatting. Supports URLs, but not colours. <code>format</code> Minecraft-like formatting strings (e.g. <code>&amp;e</code> for yellow). Supports colours, but not URLs. <code>minimessage</code> HTML-like formatting strings (e.g. <code>&lt;yellow&gt;&lt;/yellow&gt;</code> for yellow). Supports colours and hover events."},{"location":"RCChat/getting_started/","title":"Getting Started","text":"<p>To use RCChat, you will need a license key. This is obtained ingame using <code>/chatbox license register</code> </p> <p>The general structure of a program using RCChat is as follows: <pre><code>import rcchat\nimport asyncio\nasync def main():\n    cb = await rcchat.chatbox.create(\"&lt;your-license-key&gt;\")# Create chatbox instance\n\n    @cb.on_command(\"example\") # Register Event Handlers\n    async def example_command(event: command):\n        await cb.tell(event.user, \"Example Command!\")\n\n    await asyncio.Event().wait() # Wait forever so that the chatbox commands will actually execute.\n\nasyncio.run(main()) # Run the main function.\n</code></pre></p> <p>A list of Event handlers can be found at Event Handlers The data types that get provided can be found in Data Types</p>"},{"location":"carrotpay/http_api_v1/","title":"HTTP API V1 (Deprecated)","text":"<p>The CarrotPay HTTP API is the way to read data from the CarrotPay database. The API is on <code>carrotpay.herrkatze.com</code></p>"},{"location":"carrotpay/http_api_v1/#get-names-from-an-address","title":"Get names from an Address","text":"<p><code>GET /names?address=&lt;address&gt;</code> This will return a JSON list of addresses owned by that address example: <pre><code>/names?address=katze60dfn\n[\"katze.crt\", \"katzetest.crt\"]\n</code></pre></p>"},{"location":"carrotpay/http_api_v1/#get-the-address-from-a-name","title":"Get the address from a name","text":"<p><code>GET /address?name=&lt;name&gt;</code> This will get the address a name is owned by example: <pre><code>/address?name=katze.crt\nkatze60dfn\n</code></pre></p>"},{"location":"carrotpay/http_api_v1/#get-the-full-data-from-a-name","title":"Get the full data from a name","text":"<p><code>GET /name_data?name=&lt;name&gt;</code> This will get the full name data of a name. Compatible with the Krist name endpoint example: <pre><code>/name_data?name=katze.crt\n{\n\"ok\":true,\n\"name\":{\n    \"name\": \"katze.crt\",\n    \"owner\": \"katze60dfn\",\n    \"original_owner\": \"katze60dfn\",\n    \"registered\": \"2024-02-13T05:23:28\",\n    \"updated\": \"2024-02-13T05:23:28\"\n    }\n}\n</code></pre></p>"},{"location":"carrotpay/http_api_v2/","title":"HTTP API V2","text":"<p>The CarrotPay HTTP API is the way to read data from the CarrotPay database. The API is on <code>carrotpay.herrkatze.com</code></p>"},{"location":"carrotpay/http_api_v2/#get-names-from-an-address","title":"Get names from an Address","text":"<p><code>GET /v2/get_names?address=&lt;address&gt;</code> This will return a JSON list of addresses owned by that address example: <pre><code>/v2/get_names?address=katze60dfn\n[\"katze.crt\", \"katzetest.crt\"]\n</code></pre></p>"},{"location":"carrotpay/http_api_v2/#get-the-address-from-a-name","title":"Get the address from a name","text":"<p><code>GET /v2/address?name=&lt;name&gt;</code> This will get the address a name is owned by example: <pre><code>/v2/address?name=katze.crt\nkatze60dfn\n</code></pre></p>"},{"location":"carrotpay/http_api_v2/#get-the-full-data-from-a-name","title":"Get the full data from a name","text":"<p><code>GET /v2/names/{name}</code> This will get the full name data of a name. Compatible with the Krist name endpoint example: <pre><code>/v2/names/katze.crt\n{\n\"ok\":true,\n\"name\":{\n    \"name\": \"katze.crt\",\n    \"owner\": \"katze60dfn\",\n    \"original_owner\": \"katze60dfn\",\n    \"registered\": \"2024-02-13T05:23:28\",\n    \"updated\": \"2024-02-13T05:23:28\"\n    }\n}\n</code></pre></p>"},{"location":"carrotpay/krist/","title":"Krist API","text":"<p>The CarrotPay Krist API is the way to add to the database Some endpoints may cost Krist, others won't To use this, pay <code>carrotpay.kst</code> the cost and transaction metadata specified Examples are using syntax for the CarrotPay ComputerCraft program  </p>"},{"location":"carrotpay/krist/#get-a-name","title":"Get a name","text":"<p>Cost: 10 krist This endpoint will let you buy a name <code>get_name=&lt;name&gt;</code> example: <pre><code>^pay carrotpay.kst 10 get_name=example.crt\n</code></pre> This endpoint cannot be used with a SwitchCraft ingame wallet, your own wallet is required Returns nothing on success</p>"},{"location":"carrotpay/krist/#pay-to-a-name","title":"Pay to a name","text":"<p>Cost: Any This endpoint lets you pay to a .crt name with programs that don't support .crt names <code>to=&lt;name&gt;</code> example: <pre><code>^pay carrotpay.kst 16 to=example.crt\n</code></pre> If you are using the CarrotPay ComputerCraft program, you do not need to use this endpoint as it has .crt names supported natively. Returns nothing on success.</p>"},{"location":"carrotpay/krist/#transfer-a-name-to-another-address","title":"Transfer a name to another address","text":"<p>Cost: 0 This endpoint lets you transfer one of your names to a new address <code>name=&lt;name&gt;;transfer_to=&lt;new_address&gt;</code> example: <pre><code>^pay carrotpay.kst 1 name=example.crt;transfer_to=katze60dfn\n</code></pre> At least 1 krist is required to activate this endpoint due to limitations with Krist Returns a refund with message <code>Successfully transferred &lt;name&gt; to &lt;new_address&gt;</code></p>"},{"location":"trainlib/","title":"TrainLib","text":""},{"location":"trainlib/#creating-a-schedule","title":"Creating a Schedule","text":"<p>You can use <code>trainlib.schedule()</code> to create a new schedule There are no parameters. Returns: Schedule </p>"},{"location":"trainlib/conditions/","title":"Conditions","text":"<p>The <code>trainlib.conditions</code> table is a list of premade functions that make Conditions</p>"},{"location":"trainlib/conditions/#methods","title":"Methods","text":"<p><code>trainlib.conditions.delay(value: number,time_unit: number)</code> - Makes the train wait for a certain amount of time. Valid values for time_unit are:  </p> time_unit Unit 0 ticks 1 seconds 2 minutes <p><code>trainlib.conditions.time_of_day(hour: number,minute: number,rotation: number)</code> - Makes the train wait for a certain time of day. Valid Values for Rotation are:</p> Rotation Time Interval 0 Every Day 1 Every 12 Hours 2 Every 6 Hours 3 Every 4 Hours 4 Every 3 Hours 5 Every 2 Hours 6 Every Hour 7 Every 45 Minutes 8 Every 30 Minutes 9 Every 15 Minutes <p><code>trainlib.conditions.fluid_threshold(bucket: trainlib.item,threshold: number,operator: number)</code> - Makes the train wait until the fluid cargo is at a given level Bucket should be a [trainlib.item] of the bucket for the Fluid. Threshold should be a positive integer in number of buckets of fluid. Valid values for Operator are:</p> Operator Meaning 0 Greater Than 1 Less Than 2 Equal To"},{"location":"trainlib/classes/condition/","title":"Conditions","text":"<p>This class represents a condition that may be required for a train to leave the current station. Obtained from any of the methods in trainlib.conditions This class has no methods.</p>"},{"location":"trainlib/classes/condition_set/","title":"Condition Sets","text":"<p>Condition Sets come in 2 forms, OR and AND</p>"},{"location":"trainlib/classes/condition_set/#condition-set-or","title":"Condition Set (OR)","text":"<p>Contains Condition Sets (AND), TrainLib automatically generates these when adding a Condition to the set.</p>"},{"location":"trainlib/classes/condition_set/#methods","title":"Methods","text":"<p><code>set:addCondition(condition)</code> - Accepts a Condition Set (AND) or a Condition and adds it to the set. Conditions are automatically wrapped in Condition Set (AND) when being added. Returns itself for chaining.</p>"},{"location":"trainlib/classes/condition_set/#condition-set-and","title":"Condition Set (AND)","text":"<p>Contains Conditions, and are contained by Condition Sets (OR)</p>"},{"location":"trainlib/classes/condition_set/#methods_1","title":"Methods","text":"<p><code>set:addCondition(condition)</code> - Accepts a Condition and adds it to the set. Returns itself for chaining.</p>"},{"location":"trainlib/classes/entry/","title":"Entry","text":"<p>A Schedule Entry. Contains an Instruction and a Condition Set (OR) Obtained from <code>trainlib.entry(instruction,conditions)</code> This class has no methods.  </p> <p>Note</p> <p>Methods may be added in the future, but currently, this is just a wrapper class for an instruction and a condition set</p>"},{"location":"trainlib/classes/instruction/","title":"Instruction","text":"<p>This class represents an instruction for the train to follow. It is often combined with a condition set to determine when to leave the station. Obtained from any of the methods in trainlib.instructions This class has no methods.</p>"},{"location":"trainlib/classes/schedule/","title":"Schedule","text":"<p>The Schedule object allows you to create train schedule. After creating it, pass it to <code>setSchedule</code> on the Create Train Station Obtained from <code>trainlib.schedule()</code></p>"},{"location":"trainlib/classes/schedule/#methods","title":"Methods","text":"<p><code>schedule:addEntry(entry)</code> - Takes an Entry and appends it to the end of the current schedule. Returns the Schedule for chaining.  </p> <p><code>schedule:setEntry(pos,entry)</code> - Sets the entry at postion <code>pos</code> to the entry provided. Returns the Schedule for chaining.  </p> <p><code>schedule:getEntry(pos)</code> - Gets the entry at position pos. Returns: Entry</p>"}]}